// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/Grid.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { PackedElementField } from "./PackedElementField";
import { Pose } from "./Pose";
import { Vector2 } from "./Vector2";

export const protobufPackage = "foxglove";

/** A 2D grid of data */
export interface Grid {
  /** Timestamp of grid */
  timestamp:
    | Date
    | undefined;
  /** Frame of reference */
  frameId: string;
  /** Origin of grid's corner relative to frame of reference; grid is positioned in the x-y plane relative to this origin */
  pose:
    | Pose
    | undefined;
  /** Number of grid columns */
  columnCount: number;
  /** Size of single grid cell along x and y axes, relative to `pose` */
  cellSize:
    | Vector2
    | undefined;
  /** Number of bytes between rows in `data` */
  rowStride: number;
  /** Number of bytes between cells within a row in `data` */
  cellStride: number;
  /** Fields in `data`. `red`, `green`, `blue`, and `alpha` are optional for customizing the grid's color. */
  fields: PackedElementField[];
  /** Grid cell data, interpreted using `fields`, in row-major (y-major) order */
  data: Uint8Array;
}

function createBaseGrid(): Grid {
  return {
    timestamp: undefined,
    frameId: "",
    pose: undefined,
    columnCount: 0,
    cellSize: undefined,
    rowStride: 0,
    cellStride: 0,
    fields: [],
    data: new Uint8Array(0),
  };
}

export const Grid: MessageFns<Grid> = {
  encode(message: Grid, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).join();
    }
    if (message.frameId !== "") {
      writer.uint32(18).string(message.frameId);
    }
    if (message.pose !== undefined) {
      Pose.encode(message.pose, writer.uint32(26).fork()).join();
    }
    if (message.columnCount !== 0) {
      writer.uint32(37).fixed32(message.columnCount);
    }
    if (message.cellSize !== undefined) {
      Vector2.encode(message.cellSize, writer.uint32(42).fork()).join();
    }
    if (message.rowStride !== 0) {
      writer.uint32(53).fixed32(message.rowStride);
    }
    if (message.cellStride !== 0) {
      writer.uint32(61).fixed32(message.cellStride);
    }
    for (const v of message.fields) {
      PackedElementField.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.data.length !== 0) {
      writer.uint32(74).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grid {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.frameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pose = Pose.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.columnCount = reader.fixed32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cellSize = Vector2.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.rowStride = reader.fixed32();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.cellStride = reader.fixed32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fields.push(PackedElementField.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grid {
    return {
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      frameId: isSet(object.frameId) ? globalThis.String(object.frameId) : "",
      pose: isSet(object.pose) ? Pose.fromJSON(object.pose) : undefined,
      columnCount: isSet(object.columnCount) ? globalThis.Number(object.columnCount) : 0,
      cellSize: isSet(object.cellSize) ? Vector2.fromJSON(object.cellSize) : undefined,
      rowStride: isSet(object.rowStride) ? globalThis.Number(object.rowStride) : 0,
      cellStride: isSet(object.cellStride) ? globalThis.Number(object.cellStride) : 0,
      fields: globalThis.Array.isArray(object?.fields)
        ? object.fields.map((e: any) => PackedElementField.fromJSON(e))
        : [],
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: Grid): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.frameId !== "") {
      obj.frameId = message.frameId;
    }
    if (message.pose !== undefined) {
      obj.pose = Pose.toJSON(message.pose);
    }
    if (message.columnCount !== 0) {
      obj.columnCount = Math.round(message.columnCount);
    }
    if (message.cellSize !== undefined) {
      obj.cellSize = Vector2.toJSON(message.cellSize);
    }
    if (message.rowStride !== 0) {
      obj.rowStride = Math.round(message.rowStride);
    }
    if (message.cellStride !== 0) {
      obj.cellStride = Math.round(message.cellStride);
    }
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => PackedElementField.toJSON(e));
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Grid>, I>>(base?: I): Grid {
    return Grid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Grid>, I>>(object: I): Grid {
    const message = createBaseGrid();
    message.timestamp = object.timestamp ?? undefined;
    message.frameId = object.frameId ?? "";
    message.pose = (object.pose !== undefined && object.pose !== null) ? Pose.fromPartial(object.pose) : undefined;
    message.columnCount = object.columnCount ?? 0;
    message.cellSize = (object.cellSize !== undefined && object.cellSize !== null)
      ? Vector2.fromPartial(object.cellSize)
      : undefined;
    message.rowStride = object.rowStride ?? 0;
    message.cellStride = object.cellStride ?? 0;
    message.fields = object.fields?.map((e) => PackedElementField.fromPartial(e)) || [];
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
