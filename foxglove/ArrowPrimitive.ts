// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/ArrowPrimitive.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Color } from "./Color";
import { Pose } from "./Pose";

export const protobufPackage = "foxglove";

/** A primitive representing an arrow */
export interface ArrowPrimitive {
  /** Position of the arrow's tail and orientation of the arrow. Identity orientation means the arrow points in the +x direction. */
  pose:
    | Pose
    | undefined;
  /** Length of the arrow shaft */
  shaftLength: number;
  /** Diameter of the arrow shaft */
  shaftDiameter: number;
  /** Length of the arrow head */
  headLength: number;
  /** Diameter of the arrow head */
  headDiameter: number;
  /** Color of the arrow */
  color: Color | undefined;
}

function createBaseArrowPrimitive(): ArrowPrimitive {
  return { pose: undefined, shaftLength: 0, shaftDiameter: 0, headLength: 0, headDiameter: 0, color: undefined };
}

export const ArrowPrimitive: MessageFns<ArrowPrimitive> = {
  encode(message: ArrowPrimitive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pose !== undefined) {
      Pose.encode(message.pose, writer.uint32(10).fork()).join();
    }
    if (message.shaftLength !== 0) {
      writer.uint32(17).double(message.shaftLength);
    }
    if (message.shaftDiameter !== 0) {
      writer.uint32(25).double(message.shaftDiameter);
    }
    if (message.headLength !== 0) {
      writer.uint32(33).double(message.headLength);
    }
    if (message.headDiameter !== 0) {
      writer.uint32(41).double(message.headDiameter);
    }
    if (message.color !== undefined) {
      Color.encode(message.color, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArrowPrimitive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArrowPrimitive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pose = Pose.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.shaftLength = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.shaftDiameter = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.headLength = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.headDiameter = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.color = Color.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArrowPrimitive {
    return {
      pose: isSet(object.pose) ? Pose.fromJSON(object.pose) : undefined,
      shaftLength: isSet(object.shaftLength) ? globalThis.Number(object.shaftLength) : 0,
      shaftDiameter: isSet(object.shaftDiameter) ? globalThis.Number(object.shaftDiameter) : 0,
      headLength: isSet(object.headLength) ? globalThis.Number(object.headLength) : 0,
      headDiameter: isSet(object.headDiameter) ? globalThis.Number(object.headDiameter) : 0,
      color: isSet(object.color) ? Color.fromJSON(object.color) : undefined,
    };
  },

  toJSON(message: ArrowPrimitive): unknown {
    const obj: any = {};
    if (message.pose !== undefined) {
      obj.pose = Pose.toJSON(message.pose);
    }
    if (message.shaftLength !== 0) {
      obj.shaftLength = message.shaftLength;
    }
    if (message.shaftDiameter !== 0) {
      obj.shaftDiameter = message.shaftDiameter;
    }
    if (message.headLength !== 0) {
      obj.headLength = message.headLength;
    }
    if (message.headDiameter !== 0) {
      obj.headDiameter = message.headDiameter;
    }
    if (message.color !== undefined) {
      obj.color = Color.toJSON(message.color);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArrowPrimitive>, I>>(base?: I): ArrowPrimitive {
    return ArrowPrimitive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArrowPrimitive>, I>>(object: I): ArrowPrimitive {
    const message = createBaseArrowPrimitive();
    message.pose = (object.pose !== undefined && object.pose !== null) ? Pose.fromPartial(object.pose) : undefined;
    message.shaftLength = object.shaftLength ?? 0;
    message.shaftDiameter = object.shaftDiameter ?? 0;
    message.headLength = object.headLength ?? 0;
    message.headDiameter = object.headDiameter ?? 0;
    message.color = (object.color !== undefined && object.color !== null) ? Color.fromPartial(object.color) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
