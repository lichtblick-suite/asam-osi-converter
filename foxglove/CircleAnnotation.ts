// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/CircleAnnotation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { Color } from "./Color";
import { Point2 } from "./Point2";

export const protobufPackage = "foxglove";

/** A circle annotation on a 2D image */
export interface CircleAnnotation {
  /** Timestamp of circle */
  timestamp:
    | Date
    | undefined;
  /**
   * Center of the circle in 2D image coordinates (pixels).
   * The coordinate uses the top-left corner of the top-left pixel of the image as the origin.
   */
  position:
    | Point2
    | undefined;
  /** Circle diameter in pixels */
  diameter: number;
  /** Line thickness in pixels */
  thickness: number;
  /** Fill color */
  fillColor:
    | Color
    | undefined;
  /** Outline color */
  outlineColor: Color | undefined;
}

function createBaseCircleAnnotation(): CircleAnnotation {
  return {
    timestamp: undefined,
    position: undefined,
    diameter: 0,
    thickness: 0,
    fillColor: undefined,
    outlineColor: undefined,
  };
}

export const CircleAnnotation: MessageFns<CircleAnnotation> = {
  encode(message: CircleAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).join();
    }
    if (message.position !== undefined) {
      Point2.encode(message.position, writer.uint32(18).fork()).join();
    }
    if (message.diameter !== 0) {
      writer.uint32(25).double(message.diameter);
    }
    if (message.thickness !== 0) {
      writer.uint32(33).double(message.thickness);
    }
    if (message.fillColor !== undefined) {
      Color.encode(message.fillColor, writer.uint32(42).fork()).join();
    }
    if (message.outlineColor !== undefined) {
      Color.encode(message.outlineColor, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CircleAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCircleAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = Point2.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.diameter = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.thickness = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fillColor = Color.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.outlineColor = Color.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CircleAnnotation {
    return {
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      position: isSet(object.position) ? Point2.fromJSON(object.position) : undefined,
      diameter: isSet(object.diameter) ? globalThis.Number(object.diameter) : 0,
      thickness: isSet(object.thickness) ? globalThis.Number(object.thickness) : 0,
      fillColor: isSet(object.fillColor) ? Color.fromJSON(object.fillColor) : undefined,
      outlineColor: isSet(object.outlineColor) ? Color.fromJSON(object.outlineColor) : undefined,
    };
  },

  toJSON(message: CircleAnnotation): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.position !== undefined) {
      obj.position = Point2.toJSON(message.position);
    }
    if (message.diameter !== 0) {
      obj.diameter = message.diameter;
    }
    if (message.thickness !== 0) {
      obj.thickness = message.thickness;
    }
    if (message.fillColor !== undefined) {
      obj.fillColor = Color.toJSON(message.fillColor);
    }
    if (message.outlineColor !== undefined) {
      obj.outlineColor = Color.toJSON(message.outlineColor);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CircleAnnotation>, I>>(base?: I): CircleAnnotation {
    return CircleAnnotation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CircleAnnotation>, I>>(object: I): CircleAnnotation {
    const message = createBaseCircleAnnotation();
    message.timestamp = object.timestamp ?? undefined;
    message.position = (object.position !== undefined && object.position !== null)
      ? Point2.fromPartial(object.position)
      : undefined;
    message.diameter = object.diameter ?? 0;
    message.thickness = object.thickness ?? 0;
    message.fillColor = (object.fillColor !== undefined && object.fillColor !== null)
      ? Color.fromPartial(object.fillColor)
      : undefined;
    message.outlineColor = (object.outlineColor !== undefined && object.outlineColor !== null)
      ? Color.fromPartial(object.outlineColor)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
