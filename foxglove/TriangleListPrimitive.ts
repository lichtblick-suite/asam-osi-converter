// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/TriangleListPrimitive.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Color } from "./Color";
import { Point3 } from "./Point3";
import { Pose } from "./Pose";

export const protobufPackage = "foxglove";

/** A primitive representing a set of triangles or a surface tiled by triangles */
export interface TriangleListPrimitive {
  /** Origin of triangles relative to reference frame */
  pose:
    | Pose
    | undefined;
  /** Vertices to use for triangles, interpreted as a list of triples (0-1-2, 3-4-5, ...) */
  points: Point3[];
  /** Solid color to use for the whole shape. One of `color` or `colors` must be provided. */
  color:
    | Color
    | undefined;
  /** Per-vertex colors (if specified, must have the same length as `points`). One of `color` or `colors` must be provided. */
  colors: Color[];
  /**
   * Indices into the `points` and `colors` attribute arrays, which can be used to avoid duplicating attribute data.
   *
   * If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of `points` provided).
   */
  indices: number[];
}

function createBaseTriangleListPrimitive(): TriangleListPrimitive {
  return { pose: undefined, points: [], color: undefined, colors: [], indices: [] };
}

export const TriangleListPrimitive: MessageFns<TriangleListPrimitive> = {
  encode(message: TriangleListPrimitive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pose !== undefined) {
      Pose.encode(message.pose, writer.uint32(10).fork()).join();
    }
    for (const v of message.points) {
      Point3.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.color !== undefined) {
      Color.encode(message.color, writer.uint32(26).fork()).join();
    }
    for (const v of message.colors) {
      Color.encode(v!, writer.uint32(34).fork()).join();
    }
    writer.uint32(42).fork();
    for (const v of message.indices) {
      writer.fixed32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriangleListPrimitive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriangleListPrimitive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pose = Pose.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.points.push(Point3.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = Color.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.colors.push(Color.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag === 45) {
            message.indices.push(reader.fixed32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.indices.push(reader.fixed32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriangleListPrimitive {
    return {
      pose: isSet(object.pose) ? Pose.fromJSON(object.pose) : undefined,
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => Point3.fromJSON(e)) : [],
      color: isSet(object.color) ? Color.fromJSON(object.color) : undefined,
      colors: globalThis.Array.isArray(object?.colors) ? object.colors.map((e: any) => Color.fromJSON(e)) : [],
      indices: globalThis.Array.isArray(object?.indices) ? object.indices.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: TriangleListPrimitive): unknown {
    const obj: any = {};
    if (message.pose !== undefined) {
      obj.pose = Pose.toJSON(message.pose);
    }
    if (message.points?.length) {
      obj.points = message.points.map((e) => Point3.toJSON(e));
    }
    if (message.color !== undefined) {
      obj.color = Color.toJSON(message.color);
    }
    if (message.colors?.length) {
      obj.colors = message.colors.map((e) => Color.toJSON(e));
    }
    if (message.indices?.length) {
      obj.indices = message.indices.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriangleListPrimitive>, I>>(base?: I): TriangleListPrimitive {
    return TriangleListPrimitive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriangleListPrimitive>, I>>(object: I): TriangleListPrimitive {
    const message = createBaseTriangleListPrimitive();
    message.pose = (object.pose !== undefined && object.pose !== null) ? Pose.fromPartial(object.pose) : undefined;
    message.points = object.points?.map((e) => Point3.fromPartial(e)) || [];
    message.color = (object.color !== undefined && object.color !== null) ? Color.fromPartial(object.color) : undefined;
    message.colors = object.colors?.map((e) => Color.fromPartial(e)) || [];
    message.indices = object.indices?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
