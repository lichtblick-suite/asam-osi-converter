// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/CameraCalibration.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "foxglove";

/** Camera calibration parameters */
export interface CameraCalibration {
  /** Timestamp of calibration data */
  timestamp:
    | Date
    | undefined;
  /** Frame of reference for the camera. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image. */
  frameId: string;
  /** Image width */
  width: number;
  /** Image height */
  height: number;
  /**
   * Name of distortion model
   *
   * Supported parameters: `plumb_bob` (k1, k2, p1, p2, k3) and `rational_polynomial` (k1, k2, p1, p2, k3, k4, k5, k6). Distortion models are based on [OpenCV's](https://docs.opencv.org/2.4/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html) [pinhole camera model](https://en.wikipedia.org/wiki/Distortion_%28optics%29#Software_correction). This is the same [implementation used by ROS](http://docs.ros.org/en/diamondback/api/image_geometry/html/c++/pinhole__camera__model_8cpp_source.html)
   */
  distortionModel: string;
  /** Distortion parameters */
  D: number[];
  /**
   * Intrinsic camera matrix (3x3 row-major matrix)
   *
   * A 3x3 row-major matrix for the raw (distorted) image.
   *
   * Projects 3D points in the camera coordinate frame to 2D pixel coordinates using the focal lengths (fx, fy) and principal point (cx, cy).
   *
   * ```
   *     [fx  0 cx]
   * K = [ 0 fy cy]
   *     [ 0  0  1]
   * ```
   */
  K: number[];
  /**
   * Rectification matrix (stereo cameras only, 3x3 row-major matrix)
   *
   * A rotation matrix aligning the camera coordinate system to the ideal stereo image plane so that epipolar lines in both stereo images are parallel.
   */
  R: number[];
  /**
   * Projection/camera matrix (3x4 row-major matrix)
   *
   * ```
   *     [fx'  0  cx' Tx]
   * P = [ 0  fy' cy' Ty]
   *     [ 0   0   1   0]
   * ```
   *
   * By convention, this matrix specifies the intrinsic (camera) matrix of the processed (rectified) image. That is, the left 3x3 portion is the normal camera intrinsic matrix for the rectified image.
   *
   * It projects 3D points in the camera coordinate frame to 2D pixel coordinates using the focal lengths (fx', fy') and principal point (cx', cy') - these may differ from the values in K.
   *
   * For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will also have R = the identity and P[1:3,1:3] = K.
   *
   * For a stereo pair, the fourth column [Tx Ty 0]' is related to the position of the optical center of the second camera in the first camera's frame. We assume Tz = 0 so both cameras are in the same stereo image plane. The first camera always has Tx = Ty = 0. For the right (second) camera of a horizontal stereo pair, Ty = 0 and Tx = -fx' * B, where B is the baseline between the cameras.
   *
   * Given a 3D point [X Y Z]', the projection (x, y) of the point onto the rectified image is given by:
   *
   * ```
   * [u v w]' = P * [X Y Z 1]'
   *        x = u / w
   *        y = v / w
   * ```
   *
   * This holds for both images of a stereo pair.
   */
  P: number[];
}

function createBaseCameraCalibration(): CameraCalibration {
  return { timestamp: undefined, frameId: "", width: 0, height: 0, distortionModel: "", D: [], K: [], R: [], P: [] };
}

export const CameraCalibration: MessageFns<CameraCalibration> = {
  encode(message: CameraCalibration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).join();
    }
    if (message.frameId !== "") {
      writer.uint32(74).string(message.frameId);
    }
    if (message.width !== 0) {
      writer.uint32(21).fixed32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(29).fixed32(message.height);
    }
    if (message.distortionModel !== "") {
      writer.uint32(34).string(message.distortionModel);
    }
    writer.uint32(42).fork();
    for (const v of message.D) {
      writer.double(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.K) {
      writer.double(v);
    }
    writer.join();
    writer.uint32(58).fork();
    for (const v of message.R) {
      writer.double(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.P) {
      writer.double(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CameraCalibration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCameraCalibration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.frameId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.width = reader.fixed32();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.height = reader.fixed32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.distortionModel = reader.string();
          continue;
        }
        case 5: {
          if (tag === 41) {
            message.D.push(reader.double());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.D.push(reader.double());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag === 49) {
            message.K.push(reader.double());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.K.push(reader.double());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag === 57) {
            message.R.push(reader.double());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.R.push(reader.double());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 65) {
            message.P.push(reader.double());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.P.push(reader.double());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CameraCalibration {
    return {
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      frameId: isSet(object.frameId) ? globalThis.String(object.frameId) : "",
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      distortionModel: isSet(object.distortionModel) ? globalThis.String(object.distortionModel) : "",
      D: globalThis.Array.isArray(object?.D) ? object.D.map((e: any) => globalThis.Number(e)) : [],
      K: globalThis.Array.isArray(object?.K) ? object.K.map((e: any) => globalThis.Number(e)) : [],
      R: globalThis.Array.isArray(object?.R) ? object.R.map((e: any) => globalThis.Number(e)) : [],
      P: globalThis.Array.isArray(object?.P) ? object.P.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: CameraCalibration): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.frameId !== "") {
      obj.frameId = message.frameId;
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.distortionModel !== "") {
      obj.distortionModel = message.distortionModel;
    }
    if (message.D?.length) {
      obj.D = message.D;
    }
    if (message.K?.length) {
      obj.K = message.K;
    }
    if (message.R?.length) {
      obj.R = message.R;
    }
    if (message.P?.length) {
      obj.P = message.P;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CameraCalibration>, I>>(base?: I): CameraCalibration {
    return CameraCalibration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CameraCalibration>, I>>(object: I): CameraCalibration {
    const message = createBaseCameraCalibration();
    message.timestamp = object.timestamp ?? undefined;
    message.frameId = object.frameId ?? "";
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.distortionModel = object.distortionModel ?? "";
    message.D = object.D?.map((e) => e) || [];
    message.K = object.K?.map((e) => e) || [];
    message.R = object.R?.map((e) => e) || [];
    message.P = object.P?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
