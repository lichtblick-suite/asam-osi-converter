// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/Color.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "foxglove";

/** A color in RGBA format */
export interface Color {
  /** Red value between 0 and 1 */
  r: number;
  /** Green value between 0 and 1 */
  g: number;
  /** Blue value between 0 and 1 */
  b: number;
  /** Alpha value between 0 and 1 */
  a: number;
}

function createBaseColor(): Color {
  return { r: 0, g: 0, b: 0, a: 0 };
}

export const Color: MessageFns<Color> = {
  encode(message: Color, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.r !== 0) {
      writer.uint32(9).double(message.r);
    }
    if (message.g !== 0) {
      writer.uint32(17).double(message.g);
    }
    if (message.b !== 0) {
      writer.uint32(25).double(message.b);
    }
    if (message.a !== 0) {
      writer.uint32(33).double(message.a);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Color {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.r = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.g = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.b = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.a = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Color {
    return {
      r: isSet(object.r) ? globalThis.Number(object.r) : 0,
      g: isSet(object.g) ? globalThis.Number(object.g) : 0,
      b: isSet(object.b) ? globalThis.Number(object.b) : 0,
      a: isSet(object.a) ? globalThis.Number(object.a) : 0,
    };
  },

  toJSON(message: Color): unknown {
    const obj: any = {};
    if (message.r !== 0) {
      obj.r = message.r;
    }
    if (message.g !== 0) {
      obj.g = message.g;
    }
    if (message.b !== 0) {
      obj.b = message.b;
    }
    if (message.a !== 0) {
      obj.a = message.a;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Color>, I>>(base?: I): Color {
    return Color.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Color>, I>>(object: I): Color {
    const message = createBaseColor();
    message.r = object.r ?? 0;
    message.g = object.g ?? 0;
    message.b = object.b ?? 0;
    message.a = object.a ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
