// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/TextPrimitive.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Color } from "./Color";
import { Pose } from "./Pose";

export const protobufPackage = "foxglove";

/** A primitive representing a text label */
export interface TextPrimitive {
  /** Position of the center of the text box and orientation of the text. Identity orientation means the text is oriented in the xy-plane and flows from -x to +x. */
  pose:
    | Pose
    | undefined;
  /** Whether the text should respect `pose.orientation` (false) or always face the camera (true) */
  billboard: boolean;
  /** Font size (height of one line of text) */
  fontSize: number;
  /** Indicates whether `font_size` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false) */
  scaleInvariant: boolean;
  /** Color of the text */
  color:
    | Color
    | undefined;
  /** Text */
  text: string;
}

function createBaseTextPrimitive(): TextPrimitive {
  return { pose: undefined, billboard: false, fontSize: 0, scaleInvariant: false, color: undefined, text: "" };
}

export const TextPrimitive: MessageFns<TextPrimitive> = {
  encode(message: TextPrimitive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pose !== undefined) {
      Pose.encode(message.pose, writer.uint32(10).fork()).join();
    }
    if (message.billboard !== false) {
      writer.uint32(16).bool(message.billboard);
    }
    if (message.fontSize !== 0) {
      writer.uint32(25).double(message.fontSize);
    }
    if (message.scaleInvariant !== false) {
      writer.uint32(32).bool(message.scaleInvariant);
    }
    if (message.color !== undefined) {
      Color.encode(message.color, writer.uint32(42).fork()).join();
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextPrimitive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextPrimitive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pose = Pose.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.billboard = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.fontSize = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.scaleInvariant = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.color = Color.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextPrimitive {
    return {
      pose: isSet(object.pose) ? Pose.fromJSON(object.pose) : undefined,
      billboard: isSet(object.billboard) ? globalThis.Boolean(object.billboard) : false,
      fontSize: isSet(object.fontSize) ? globalThis.Number(object.fontSize) : 0,
      scaleInvariant: isSet(object.scaleInvariant) ? globalThis.Boolean(object.scaleInvariant) : false,
      color: isSet(object.color) ? Color.fromJSON(object.color) : undefined,
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: TextPrimitive): unknown {
    const obj: any = {};
    if (message.pose !== undefined) {
      obj.pose = Pose.toJSON(message.pose);
    }
    if (message.billboard !== false) {
      obj.billboard = message.billboard;
    }
    if (message.fontSize !== 0) {
      obj.fontSize = message.fontSize;
    }
    if (message.scaleInvariant !== false) {
      obj.scaleInvariant = message.scaleInvariant;
    }
    if (message.color !== undefined) {
      obj.color = Color.toJSON(message.color);
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TextPrimitive>, I>>(base?: I): TextPrimitive {
    return TextPrimitive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TextPrimitive>, I>>(object: I): TextPrimitive {
    const message = createBaseTextPrimitive();
    message.pose = (object.pose !== undefined && object.pose !== null) ? Pose.fromPartial(object.pose) : undefined;
    message.billboard = object.billboard ?? false;
    message.fontSize = object.fontSize ?? 0;
    message.scaleInvariant = object.scaleInvariant ?? false;
    message.color = (object.color !== undefined && object.color !== null) ? Color.fromPartial(object.color) : undefined;
    message.text = object.text ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
