// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/LinePrimitive.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Color } from "./Color";
import { Point3 } from "./Point3";
import { Pose } from "./Pose";

export const protobufPackage = "foxglove";

/** A primitive representing a series of points connected by lines */
export interface LinePrimitive {
  /** Drawing primitive to use for lines */
  type: LinePrimitive_Type;
  /** Origin of lines relative to reference frame */
  pose:
    | Pose
    | undefined;
  /** Line thickness */
  thickness: number;
  /** Indicates whether `thickness` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false) */
  scaleInvariant: boolean;
  /** Points along the line */
  points: Point3[];
  /** Solid color to use for the whole line. One of `color` or `colors` must be provided. */
  color:
    | Color
    | undefined;
  /** Per-point colors (if specified, must have the same length as `points`). One of `color` or `colors` must be provided. */
  colors: Color[];
  /**
   * Indices into the `points` and `colors` attribute arrays, which can be used to avoid duplicating attribute data.
   *
   * If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of `points` provided).
   */
  indices: number[];
}

/** An enumeration indicating how input points should be interpreted to create lines */
export enum LinePrimitive_Type {
  /** LINE_STRIP - Connected line segments: 0-1, 1-2, ..., (n-1)-n */
  LINE_STRIP = 0,
  /** LINE_LOOP - Closed polygon: 0-1, 1-2, ..., (n-1)-n, n-0 */
  LINE_LOOP = 1,
  /** LINE_LIST - Individual line segments: 0-1, 2-3, 4-5, ... */
  LINE_LIST = 2,
  UNRECOGNIZED = -1,
}

export function linePrimitive_TypeFromJSON(object: any): LinePrimitive_Type {
  switch (object) {
    case 0:
    case "LINE_STRIP":
      return LinePrimitive_Type.LINE_STRIP;
    case 1:
    case "LINE_LOOP":
      return LinePrimitive_Type.LINE_LOOP;
    case 2:
    case "LINE_LIST":
      return LinePrimitive_Type.LINE_LIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinePrimitive_Type.UNRECOGNIZED;
  }
}

export function linePrimitive_TypeToJSON(object: LinePrimitive_Type): string {
  switch (object) {
    case LinePrimitive_Type.LINE_STRIP:
      return "LINE_STRIP";
    case LinePrimitive_Type.LINE_LOOP:
      return "LINE_LOOP";
    case LinePrimitive_Type.LINE_LIST:
      return "LINE_LIST";
    case LinePrimitive_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseLinePrimitive(): LinePrimitive {
  return {
    type: 0,
    pose: undefined,
    thickness: 0,
    scaleInvariant: false,
    points: [],
    color: undefined,
    colors: [],
    indices: [],
  };
}

export const LinePrimitive: MessageFns<LinePrimitive> = {
  encode(message: LinePrimitive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.pose !== undefined) {
      Pose.encode(message.pose, writer.uint32(18).fork()).join();
    }
    if (message.thickness !== 0) {
      writer.uint32(25).double(message.thickness);
    }
    if (message.scaleInvariant !== false) {
      writer.uint32(32).bool(message.scaleInvariant);
    }
    for (const v of message.points) {
      Point3.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.color !== undefined) {
      Color.encode(message.color, writer.uint32(50).fork()).join();
    }
    for (const v of message.colors) {
      Color.encode(v!, writer.uint32(58).fork()).join();
    }
    writer.uint32(66).fork();
    for (const v of message.indices) {
      writer.fixed32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinePrimitive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinePrimitive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pose = Pose.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.thickness = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.scaleInvariant = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.points.push(Point3.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.color = Color.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.colors.push(Color.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag === 69) {
            message.indices.push(reader.fixed32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.indices.push(reader.fixed32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinePrimitive {
    return {
      type: isSet(object.type) ? linePrimitive_TypeFromJSON(object.type) : 0,
      pose: isSet(object.pose) ? Pose.fromJSON(object.pose) : undefined,
      thickness: isSet(object.thickness) ? globalThis.Number(object.thickness) : 0,
      scaleInvariant: isSet(object.scaleInvariant) ? globalThis.Boolean(object.scaleInvariant) : false,
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => Point3.fromJSON(e)) : [],
      color: isSet(object.color) ? Color.fromJSON(object.color) : undefined,
      colors: globalThis.Array.isArray(object?.colors) ? object.colors.map((e: any) => Color.fromJSON(e)) : [],
      indices: globalThis.Array.isArray(object?.indices) ? object.indices.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: LinePrimitive): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = linePrimitive_TypeToJSON(message.type);
    }
    if (message.pose !== undefined) {
      obj.pose = Pose.toJSON(message.pose);
    }
    if (message.thickness !== 0) {
      obj.thickness = message.thickness;
    }
    if (message.scaleInvariant !== false) {
      obj.scaleInvariant = message.scaleInvariant;
    }
    if (message.points?.length) {
      obj.points = message.points.map((e) => Point3.toJSON(e));
    }
    if (message.color !== undefined) {
      obj.color = Color.toJSON(message.color);
    }
    if (message.colors?.length) {
      obj.colors = message.colors.map((e) => Color.toJSON(e));
    }
    if (message.indices?.length) {
      obj.indices = message.indices.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinePrimitive>, I>>(base?: I): LinePrimitive {
    return LinePrimitive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinePrimitive>, I>>(object: I): LinePrimitive {
    const message = createBaseLinePrimitive();
    message.type = object.type ?? 0;
    message.pose = (object.pose !== undefined && object.pose !== null) ? Pose.fromPartial(object.pose) : undefined;
    message.thickness = object.thickness ?? 0;
    message.scaleInvariant = object.scaleInvariant ?? false;
    message.points = object.points?.map((e) => Point3.fromPartial(e)) || [];
    message.color = (object.color !== undefined && object.color !== null) ? Color.fromPartial(object.color) : undefined;
    message.colors = object.colors?.map((e) => Color.fromPartial(e)) || [];
    message.indices = object.indices?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
