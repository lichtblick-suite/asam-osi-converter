// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/PointsAnnotation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { Color } from "./Color";
import { Point2 } from "./Point2";

export const protobufPackage = "foxglove";

/** An array of points on a 2D image */
export interface PointsAnnotation {
  /** Timestamp of annotation */
  timestamp:
    | Date
    | undefined;
  /** Type of points annotation to draw */
  type: PointsAnnotation_Type;
  /**
   * Points in 2D image coordinates (pixels).
   * These coordinates use the top-left corner of the top-left pixel of the image as the origin.
   */
  points: Point2[];
  /** Outline color */
  outlineColor:
    | Color
    | undefined;
  /** Per-point colors, if `type` is `POINTS`, or per-segment stroke colors, if `type` is `LINE_LIST`, `LINE_STRIP` or `LINE_LOOP`. */
  outlineColors: Color[];
  /** Fill color */
  fillColor:
    | Color
    | undefined;
  /** Stroke thickness in pixels */
  thickness: number;
}

/** Type of points annotation */
export enum PointsAnnotation_Type {
  UNKNOWN = 0,
  /** POINTS - Individual points: 0, 1, 2, ... */
  POINTS = 1,
  /** LINE_LOOP - Closed polygon: 0-1, 1-2, ..., (n-1)-n, n-0 */
  LINE_LOOP = 2,
  /** LINE_STRIP - Connected line segments: 0-1, 1-2, ..., (n-1)-n */
  LINE_STRIP = 3,
  /** LINE_LIST - Individual line segments: 0-1, 2-3, 4-5, ... */
  LINE_LIST = 4,
  UNRECOGNIZED = -1,
}

export function pointsAnnotation_TypeFromJSON(object: any): PointsAnnotation_Type {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return PointsAnnotation_Type.UNKNOWN;
    case 1:
    case "POINTS":
      return PointsAnnotation_Type.POINTS;
    case 2:
    case "LINE_LOOP":
      return PointsAnnotation_Type.LINE_LOOP;
    case 3:
    case "LINE_STRIP":
      return PointsAnnotation_Type.LINE_STRIP;
    case 4:
    case "LINE_LIST":
      return PointsAnnotation_Type.LINE_LIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PointsAnnotation_Type.UNRECOGNIZED;
  }
}

export function pointsAnnotation_TypeToJSON(object: PointsAnnotation_Type): string {
  switch (object) {
    case PointsAnnotation_Type.UNKNOWN:
      return "UNKNOWN";
    case PointsAnnotation_Type.POINTS:
      return "POINTS";
    case PointsAnnotation_Type.LINE_LOOP:
      return "LINE_LOOP";
    case PointsAnnotation_Type.LINE_STRIP:
      return "LINE_STRIP";
    case PointsAnnotation_Type.LINE_LIST:
      return "LINE_LIST";
    case PointsAnnotation_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBasePointsAnnotation(): PointsAnnotation {
  return {
    timestamp: undefined,
    type: 0,
    points: [],
    outlineColor: undefined,
    outlineColors: [],
    fillColor: undefined,
    thickness: 0,
  };
}

export const PointsAnnotation: MessageFns<PointsAnnotation> = {
  encode(message: PointsAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    for (const v of message.points) {
      Point2.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.outlineColor !== undefined) {
      Color.encode(message.outlineColor, writer.uint32(34).fork()).join();
    }
    for (const v of message.outlineColors) {
      Color.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.fillColor !== undefined) {
      Color.encode(message.fillColor, writer.uint32(50).fork()).join();
    }
    if (message.thickness !== 0) {
      writer.uint32(57).double(message.thickness);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PointsAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePointsAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.points.push(Point2.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.outlineColor = Color.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.outlineColors.push(Color.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fillColor = Color.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.thickness = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PointsAnnotation {
    return {
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      type: isSet(object.type) ? pointsAnnotation_TypeFromJSON(object.type) : 0,
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => Point2.fromJSON(e)) : [],
      outlineColor: isSet(object.outlineColor) ? Color.fromJSON(object.outlineColor) : undefined,
      outlineColors: globalThis.Array.isArray(object?.outlineColors)
        ? object.outlineColors.map((e: any) => Color.fromJSON(e))
        : [],
      fillColor: isSet(object.fillColor) ? Color.fromJSON(object.fillColor) : undefined,
      thickness: isSet(object.thickness) ? globalThis.Number(object.thickness) : 0,
    };
  },

  toJSON(message: PointsAnnotation): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.type !== 0) {
      obj.type = pointsAnnotation_TypeToJSON(message.type);
    }
    if (message.points?.length) {
      obj.points = message.points.map((e) => Point2.toJSON(e));
    }
    if (message.outlineColor !== undefined) {
      obj.outlineColor = Color.toJSON(message.outlineColor);
    }
    if (message.outlineColors?.length) {
      obj.outlineColors = message.outlineColors.map((e) => Color.toJSON(e));
    }
    if (message.fillColor !== undefined) {
      obj.fillColor = Color.toJSON(message.fillColor);
    }
    if (message.thickness !== 0) {
      obj.thickness = message.thickness;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PointsAnnotation>, I>>(base?: I): PointsAnnotation {
    return PointsAnnotation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PointsAnnotation>, I>>(object: I): PointsAnnotation {
    const message = createBasePointsAnnotation();
    message.timestamp = object.timestamp ?? undefined;
    message.type = object.type ?? 0;
    message.points = object.points?.map((e) => Point2.fromPartial(e)) || [];
    message.outlineColor = (object.outlineColor !== undefined && object.outlineColor !== null)
      ? Color.fromPartial(object.outlineColor)
      : undefined;
    message.outlineColors = object.outlineColors?.map((e) => Color.fromPartial(e)) || [];
    message.fillColor = (object.fillColor !== undefined && object.fillColor !== null)
      ? Color.fromPartial(object.fillColor)
      : undefined;
    message.thickness = object.thickness ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
