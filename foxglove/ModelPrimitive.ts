// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/ModelPrimitive.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Color } from "./Color";
import { Pose } from "./Pose";
import { Vector3 } from "./Vector3";

export const protobufPackage = "foxglove";

/** A primitive representing a 3D model file loaded from an external URL or embedded data */
export interface ModelPrimitive {
  /** Origin of model relative to reference frame */
  pose:
    | Pose
    | undefined;
  /** Scale factor to apply to the model along each axis */
  scale:
    | Vector3
    | undefined;
  /** Solid color to use for the whole model if `override_color` is true. */
  color:
    | Color
    | undefined;
  /** Whether to use the color specified in `color` instead of any materials embedded in the original model. */
  overrideColor: boolean;
  /** URL pointing to model file. One of `url` or `data` should be provided. */
  url: string;
  /** [Media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of embedded model (e.g. `model/gltf-binary`). Required if `data` is provided instead of `url`. Overrides the inferred media type if `url` is provided. */
  mediaType: string;
  /** Embedded model. One of `url` or `data` should be provided. If `data` is provided, `media_type` must be set to indicate the type of the data. */
  data: Uint8Array;
}

function createBaseModelPrimitive(): ModelPrimitive {
  return {
    pose: undefined,
    scale: undefined,
    color: undefined,
    overrideColor: false,
    url: "",
    mediaType: "",
    data: new Uint8Array(0),
  };
}

export const ModelPrimitive: MessageFns<ModelPrimitive> = {
  encode(message: ModelPrimitive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pose !== undefined) {
      Pose.encode(message.pose, writer.uint32(10).fork()).join();
    }
    if (message.scale !== undefined) {
      Vector3.encode(message.scale, writer.uint32(18).fork()).join();
    }
    if (message.color !== undefined) {
      Color.encode(message.color, writer.uint32(26).fork()).join();
    }
    if (message.overrideColor !== false) {
      writer.uint32(32).bool(message.overrideColor);
    }
    if (message.url !== "") {
      writer.uint32(42).string(message.url);
    }
    if (message.mediaType !== "") {
      writer.uint32(50).string(message.mediaType);
    }
    if (message.data.length !== 0) {
      writer.uint32(58).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelPrimitive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelPrimitive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pose = Pose.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.scale = Vector3.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = Color.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.overrideColor = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.mediaType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelPrimitive {
    return {
      pose: isSet(object.pose) ? Pose.fromJSON(object.pose) : undefined,
      scale: isSet(object.scale) ? Vector3.fromJSON(object.scale) : undefined,
      color: isSet(object.color) ? Color.fromJSON(object.color) : undefined,
      overrideColor: isSet(object.overrideColor) ? globalThis.Boolean(object.overrideColor) : false,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: ModelPrimitive): unknown {
    const obj: any = {};
    if (message.pose !== undefined) {
      obj.pose = Pose.toJSON(message.pose);
    }
    if (message.scale !== undefined) {
      obj.scale = Vector3.toJSON(message.scale);
    }
    if (message.color !== undefined) {
      obj.color = Color.toJSON(message.color);
    }
    if (message.overrideColor !== false) {
      obj.overrideColor = message.overrideColor;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.mediaType !== "") {
      obj.mediaType = message.mediaType;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModelPrimitive>, I>>(base?: I): ModelPrimitive {
    return ModelPrimitive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModelPrimitive>, I>>(object: I): ModelPrimitive {
    const message = createBaseModelPrimitive();
    message.pose = (object.pose !== undefined && object.pose !== null) ? Pose.fromPartial(object.pose) : undefined;
    message.scale = (object.scale !== undefined && object.scale !== null)
      ? Vector3.fromPartial(object.scale)
      : undefined;
    message.color = (object.color !== undefined && object.color !== null) ? Color.fromPartial(object.color) : undefined;
    message.overrideColor = object.overrideColor ?? false;
    message.url = object.url ?? "";
    message.mediaType = object.mediaType ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
