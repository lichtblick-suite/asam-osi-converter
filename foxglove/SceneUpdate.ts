// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/SceneUpdate.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SceneEntity } from "./SceneEntity";
import { SceneEntityDeletion } from "./SceneEntityDeletion";

export const protobufPackage = "foxglove";

/** An update to the entities displayed in a 3D scene */
export interface SceneUpdate {
  /** Scene entities to delete */
  deletions: SceneEntityDeletion[];
  /** Scene entities to add or replace */
  entities: SceneEntity[];
}

function createBaseSceneUpdate(): SceneUpdate {
  return { deletions: [], entities: [] };
}

export const SceneUpdate: MessageFns<SceneUpdate> = {
  encode(message: SceneUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deletions) {
      SceneEntityDeletion.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.entities) {
      SceneEntity.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SceneUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSceneUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deletions.push(SceneEntityDeletion.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.entities.push(SceneEntity.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SceneUpdate {
    return {
      deletions: globalThis.Array.isArray(object?.deletions)
        ? object.deletions.map((e: any) => SceneEntityDeletion.fromJSON(e))
        : [],
      entities: globalThis.Array.isArray(object?.entities)
        ? object.entities.map((e: any) => SceneEntity.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SceneUpdate): unknown {
    const obj: any = {};
    if (message.deletions?.length) {
      obj.deletions = message.deletions.map((e) => SceneEntityDeletion.toJSON(e));
    }
    if (message.entities?.length) {
      obj.entities = message.entities.map((e) => SceneEntity.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SceneUpdate>, I>>(base?: I): SceneUpdate {
    return SceneUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SceneUpdate>, I>>(object: I): SceneUpdate {
    const message = createBaseSceneUpdate();
    message.deletions = object.deletions?.map((e) => SceneEntityDeletion.fromPartial(e)) || [];
    message.entities = object.entities?.map((e) => SceneEntity.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
