// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: foxglove/SpherePrimitive.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Color } from "./Color";
import { Pose } from "./Pose";
import { Vector3 } from "./Vector3";

export const protobufPackage = "foxglove";

/** A primitive representing a sphere or ellipsoid */
export interface SpherePrimitive {
  /** Position of the center of the sphere and orientation of the sphere */
  pose:
    | Pose
    | undefined;
  /** Size (diameter) of the sphere along each axis */
  size:
    | Vector3
    | undefined;
  /** Color of the sphere */
  color: Color | undefined;
}

function createBaseSpherePrimitive(): SpherePrimitive {
  return { pose: undefined, size: undefined, color: undefined };
}

export const SpherePrimitive: MessageFns<SpherePrimitive> = {
  encode(message: SpherePrimitive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pose !== undefined) {
      Pose.encode(message.pose, writer.uint32(10).fork()).join();
    }
    if (message.size !== undefined) {
      Vector3.encode(message.size, writer.uint32(18).fork()).join();
    }
    if (message.color !== undefined) {
      Color.encode(message.color, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpherePrimitive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpherePrimitive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pose = Pose.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.size = Vector3.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = Color.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpherePrimitive {
    return {
      pose: isSet(object.pose) ? Pose.fromJSON(object.pose) : undefined,
      size: isSet(object.size) ? Vector3.fromJSON(object.size) : undefined,
      color: isSet(object.color) ? Color.fromJSON(object.color) : undefined,
    };
  },

  toJSON(message: SpherePrimitive): unknown {
    const obj: any = {};
    if (message.pose !== undefined) {
      obj.pose = Pose.toJSON(message.pose);
    }
    if (message.size !== undefined) {
      obj.size = Vector3.toJSON(message.size);
    }
    if (message.color !== undefined) {
      obj.color = Color.toJSON(message.color);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpherePrimitive>, I>>(base?: I): SpherePrimitive {
    return SpherePrimitive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpherePrimitive>, I>>(object: I): SpherePrimitive {
    const message = createBaseSpherePrimitive();
    message.pose = (object.pose !== undefined && object.pose !== null) ? Pose.fromPartial(object.pose) : undefined;
    message.size = (object.size !== undefined && object.size !== null) ? Vector3.fromPartial(object.size) : undefined;
    message.color = (object.color !== undefined && object.color !== null) ? Color.fromPartial(object.color) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
